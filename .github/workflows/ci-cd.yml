name: CI/CD Pipeline

on:
  push:
    branches:
      # - develop
      - staging
      - master
  pull_request:
    branches:
      # - develop
      - staging
      - master

env:
  IMAGE_NAME: schorka1/ese-tracking

jobs:
  build-and-test:
    name: üõ†Ô∏è Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Run tests
        run: npm test

  sonar-scan:
    name: üîç SonarQube Analysis
    needs: build-and-test
    runs-on: ubuntu-latest

    services:
      sonarqube:
        image: sonarqube:lts-community
        ports:
          - 9000:9000
        options: >-
          --health-cmd="curl -s http://localhost:9000/api/system/status | grep -q UP"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Wait for SonarQube to be ready
        run: |
          until curl -s http://localhost:9000/api/system/status | grep -q "UP"; do
            echo "‚è≥ Aguardando SonarQube..."
            sleep 5
          done

      - name: Run SonarScanner
        run: |
          docker run --rm --platform linux/amd64 \
            -e SONAR_HOST_URL="http://host.docker.internal:9000" \
            -e SONAR_LOGIN="${{ secrets.SONAR_TOKEN }}" \
            -v "${{ github.workspace }}":/usr/src \
            sonarsource/sonar-scanner-cli \
            -Dsonar.projectKey=ese-tracking \
            -Dsonar.sources=src \
            -Dsonar.host.url=http://host.docker.internal:9000 \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  build-and-push-docker:
    name: üê≥ Build & Push Docker
    needs: [build-and-test, sonar-scan]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build \
            --build-arg NODE_ENV=production \
            -t $IMAGE_NAME:${{ github.sha }} .

      - name: Push Docker image
        run: |
          docker push $IMAGE_NAME:${{ github.sha }}

      - name: Tag & push latest (master)
        if: github.ref == 'refs/heads/master'
        run: |
          docker tag $IMAGE_NAME:${{ github.sha }} $IMAGE_NAME:latest
          docker push $IMAGE_NAME:latest
